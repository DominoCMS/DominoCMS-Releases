DominoViews.registerView( 'Domino.Admin.Entry.Edit.Field.Cross', function( data ) {	"use strict";	return <div id="cross">		<div class="grid-x grid-padding-x field">			<div class="small-12 medium-3 large-2 cell">				<span class="title">Add cross module</span>			</div>			<div class="small-12 medium-9 large-4 end cell">				<component view="Domino.Admin.Entry.Selector" componentData={ data.data.miniSelector } />			</div>			</div>        <div class="domino-cross-tabs">			<ul class="domino-cross-tabs-buttons">				{ (function () {					var entries = [];					if ( data.data )						for ( var i = 0; i < data.data.ModulesCrossed.length; i++ ) {							var entry = data.data.ModulesCrossed[i];                            var isactive = ( i == 0 ) ? 'is-active' : '';							entries.push( <li data-id={ 'CrossTabs' + entry.moduleRel } class={ isactive }>								<a href="#" class="selected">{ entry.moduleRel }</a>							</li>);						}					return entries;				})() }			</ul>            <div class="domino-cross-tabs-content">                { (function () {                    var entries = [];                    if ( data.data )                        for ( var i = 0; i < data.data.ModulesCrossed.length; i++ ) {                            var entry = data.data.ModulesCrossed[i];                            var isactive = ( i == 0 ) ? 'domino-cross-tabs-panel is-active' : 'domino-cross-tabs-panel';                            entries.push(<div data-id={ 'CrossTabs' + entry.moduleRel } class={ isactive }>                                <h2>{ entry.moduleRel }</h2>                                <component view={ 'Domino.Admin.Entry.Edit.Field.Cross.' + entry.type } componentData={ entry.data } />                            </div>);                        }                    return entries;                })() }            </div>        </div>	</div>});