DominoViews.registerView( 'Domino.Admin.Entry.List.List.Entries', function( data ) {	"use strict";	var fillData = function (entryData, level, levInd ) {		var ret = [];		if ( entryData.entries ) {            for (var i = 0; i < entryData.entries.length; i++) {				var entry = entryData.entries[i];				var disp = ( level == 0 ) ? '' : '';                var levelIndex = ( level == 0 ) ? i : levInd + '|' + i;                if ( ( entryData.pagination.pages > 1 ) && ( i == 0 ) )					ret.push(<tr class={ 'pagination' } style={ disp } parent={ entry.parent }><td colspan={ entryData.columns.length + 1 }><component view="Domino.Admin.Entry.List.Pagination" componentData={ entryData.pagination } /></td></tr>);                if ( entry.data )                    ret.push(<tr class={ 'list level' + level } style={ disp } entry={ entry.entry } index={ levelIndex }>{ (function () {                        var ret2 = [];                        if ( entry.hasChildren )                            ret2.push(<td name="arrow" entry={ entry.entry } class="tdArrow"><span class="arrow icon-arrow_right"></span></td>);                        else                            ret2.push(<td class="tdArrow"></td>);                        if ( entry.data ) {                            for (var col = 0; col < entryData.columns.length; col++) {                                var colData = entry.data[col],                                    column = entryData.columns[col],                                    clickable = ( column.clickable == true ) ? 'click' : '';                                var cData = {                                    options: data.options,                                    column: column,                                    data: colData,                                    link:  entry['link'],                                    id: entry['id'],                                    entry: entry.entry                                };                                ret2.push(<td class={ clickable }><component view={ 'Domino.Admin.Entry.List.Field.' + column['structureItem'] } componentData={ cData } /></td>);                                //ret2.push(<td class={ clickable }><a href={ entry.link }>{ colData }</a></td>);                            }                        }                        else                            ret2.push(<td entry={ entry.entry } colspan={ entryData.columns.length }>{ entry['colName'] } <small>{ entry.entry }</small></td>);                        return ret2;                    })() }</tr>);                else                    ret.push(<tr class={ 'list root' } style={ disp } entry={ entry.entry } index={ levelIndex }>{ (function () {                            var ret2 = [];                            if ( entry.hasChildren )                                ret2.push(<td name="arrow" entry={ entry.entry }><span class="arrow icon-arrow_right"></span></td>);                            return ret2;                        })() }                        <td colspan={ entryData.columns.length } class="click">                            { entry['colName'] } <small>{ entry.entry }</small>                        </td>                    </tr>);                var theEntry = false;                if ( entry.list )                    if ( entry.list.entries )                        if ( entry.list.entries.length > 0 )                            theEntry = true;                if ( entry.hasChildren && theEntry === false )                    ret.push(<tr parent={ entry.parent } style="display:none" class="children"><td colspan={ entryData.columns.length + 1 }></td></tr>);                else if ( entry.hasChildren && theEntry === true ) {                    ret.push(<tr parent={ entry.parent } style="display:none" class="children">                        <td colspan={ entryData.columns.length + 1 }><table><tbody>{ fillData( entry.list , (level + 1), levelIndex ) }</tbody></table></td>                    </tr>);                }			}		}		//var r = [];            return ret ;		//return r;	}        return <tbody>{ fillData ( data, 0, 0 ) }</tbody>;} );